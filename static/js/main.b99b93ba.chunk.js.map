{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","components/CounterButton.js","components/Header.js","constants.js","containers/App.js","actions.js","reportWebVitals.js","reducers.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","console","log","map","user","i","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","CounterButton","updateCount","count","nextProps","nextState","color","onClick","PureComponent","Header","CHANGE_SEARCHFIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","text","target","value","payload","fetch","then","response","json","data","catch","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialStateSearch","initialStateRobots","rootReducer","createLogger","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b99b93ba.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ name, email, id }) => {\n    return (\n        <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n            <img alt=\"robots\" src={`https://robohash.org/${id}?200x200`} />\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\n\nconst CardList = ({ robots }) => {\n  // if (true) {\n  //   throw new Error('NOOO');\n  // }\n  console.log('CardList');\n  return (\n    <div>\n      {\n        robots.map((user, i) => {\n          return (\n            <Card \n            key={i} \n            id={robots[i].id} \n            name={robots[i].name} \n            email={robots[i].email}\n            />\n            );\n        })\n      }\n    </div>\n  );\n}  \nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({searchfield, searchChange}) => {\n    console.log('SearchBox');\n    return (\n        <div className='pa2'>\n            <input\n                className='pa3 ba b--green bg-lightest-blue'\n                type='search' \n                placeholder='search robot'\n                onChange={searchChange}\n            />\n        </div>\n    );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        <div style={{overflowY: 'scroll', border: '5px solid black', height: '800px'}}>\n            {props.children}\n        </div>\n    )\n}\n\nexport default Scroll;","import React, { Component } from 'react';\n\nclass ErrorBoundry extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError: false\n        };\n    }\n\n    componentDidCatch(error, info) {\n        this.setState({ hasError: true });\n    }\n    \n    render() {\n        if (this.state.hasError) {\n            return <h1>Oooops. That is not good</h1>\n        }\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundry;","import React, { PureComponent } from 'react';\n\nclass CounterButton extends PureComponent {\n    constructor() {\n        super();\n        this.state = {\n            count: 0\n        }\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        if (this.state.count !== nextState.count) {\n            return true;\n        }\n        return false;\n    }\n\n    updateCount = () => {\n        this.setState(state => {\n            return {count: state.count + 1}\n        });\n    }\n\n    render() {\n        console.log('CounterButton');\n        return (\n            <button color={this.props.color} onClick={this.updateCount}>Count: {this.state.count}</button>\n        );\n    }\n}\n\nexport default CounterButton;","import React, { Component } from 'react';\nimport CounterButton from './CounterButton';\n\nclass Header extends Component {\n    // shouldComponentUpdate() {\n    //     return false;\n    // }\n    render() {\n        console.log('Header');\n        return (\n            <div>\n                <h1 className='f1'>RoboFriends</h1>\n                <CounterButton color={'red'} />\n            </div>\n        );\n    }\n}\n\nexport default Header;","export const CHANGE_SEARCHFIELD = 'CHANGE_SEARCHFIELD';\n\nexport const REQUEST_ROBOTS_PENDING ='REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS ='REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED ='REQUEST_ROBOTS_FAILED';","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport Header from '../components/Header';\nimport './App.css';\n\nimport { requestRobots, setSearchField } from '../actions';\n\nconst mapStateToProps = state => {\n    return {\n        searchField: state.searchRobots.searchField,\n        robots: state.requestRobots.robots,\n        isPending: state.requestRobots.isPending,\n        error: state.requestRobots.error\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n        onRequestRobots: () => dispatch(requestRobots())\n    }\n}\n\nclass App extends Component {\n    componentDidMount() {\n        this.props.onRequestRobots();\n    }\n\n    render() {\n        const { searchField, onSearchChange, robots, isPending } = this.props;\n        const filteredRobots = robots.filter(robot => {\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\n        });\n        return isPending ?\n            <h1>Loading</h1> :\n            (\n                <div className='tc'>\n                    <Header />\n                    <SearchBox searchChange={onSearchChange}/>\n                    <Scroll>\n                    <ErrorBoundry>\n                        <CardList robots={filteredRobots}/>\n                    </ErrorBoundry>\n                    </Scroll>\n                </div>\n            );\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { \n    CHANGE_SEARCHFIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n} from './constants.js';\n\nexport const setSearchField = (text) => ({\n    type: CHANGE_SEARCHFIELD,\n    payload: text\n});\n\nexport const requestRobots = () => (dispatch) => {\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\n    fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n        .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { \n    CHANGE_SEARCHFIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n} from './constants.js';\n\nconst initialStateSearch = {\n    searchField: ''\n}\n\nexport const searchRobots = (state=initialStateSearch, action={}) => {\n    switch(action.type) {\n        case CHANGE_SEARCHFIELD: \n            return Object.assign({}, state, { searchField: action.payload })\n        default:\n            return state;\n    }\n}\n\nconst initialStateRobots = {\n    isPending: false,\n    robots: [],\n    error: ''\n}\n\nexport const requestRobots = (state=initialStateRobots, action={})=> {\n    switch(action.type) {\n        case REQUEST_ROBOTS_PENDING:\n            return Object.assign({}, state, { isPending: true });\n        case REQUEST_ROBOTS_SUCCESS:\n            return Object.assign({}, state, { robots: action.payload, isPending: false });\n        case REQUEST_ROBOTS_FAILED:\n            return Object.assign({}, state, { error: action.payload, isPending: false });\n        default:\n            return state;\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\nimport { searchRobots, requestRobots } from './reducers';\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\nconst logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>\n, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}